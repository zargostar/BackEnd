public class ShapeFactory : IShapeFactory
{
    private readonly IServiceProvider _serviceProvider;

    public ShapeFactory(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }

    public IShape GetShape(string shapeType)
    {
        Type type = shapeType.ToLower() switch
        {
            "circle" => typeof(Circle),
            "square" => typeof(Square),
            "rectangle" => typeof(Rectangle),
            _ => throw new ArgumentException($"Shape type '{shapeType}' is not registered.")
        };

        return _serviceProvider.GetRequiredService(type) as IShape;
    }
}
=========================
  private decimal TestPaternSwich(Order order){
        decimal result=0;
        if(order.ShippingProvider is SwedishPostalServiceShippingProvider {Total>15} provider){
            result=provider.FreightCost +20
        }
        else if(order.ShippingProvider is SwedishPostalServiceShippingProvider ){
             result=provider.FreightCost -20 
        }
        return result;

       }
        
        private decimal CalculateFreightCost(Order order)
        => order.ShippingProvider switch
            {
                SwedishPostalServiceShippingProvider
                { DeliverNextDay: true }
                provider => provider.FreightCost + 50m,
                
                SwedishPostalServiceShippingProvider
                provider => provider.FreightCost - 50m,

                var provider => provider?.FreightCost ?? 50m
            };
            

    }
====================
using FluentValidation;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using OrderService.Application.Exceptions;

namespace OrderService.API.Filters
{
    public class GlobalExeptionFilter:ExceptionFilterAttribute
    {
        private readonly ILogger<GlobalExeptionFilter> _logger;

        public GlobalExeptionFilter(ILogger<GlobalExeptionFilter> logger)
        {
            _logger = logger;
        }

        public override void OnException(ExceptionContext context)
        {
            var errors=new List<string>();
            if (context.Exception is ValidationException exception) { 
              errors= exception?.Errors?.Select(x=>x.ErrorMessage).ToList();
                //context.Result = new BadRequestObjectResult(errors);

            }
           else if(context.Exception is ClientErrorMessage clientErrorMessage) {
                errors.Add(clientErrorMessage.Message);
                errors.Add("test");

                //errors.Add(clientErrorMessage.Message);
                // context.Result = new BadRequestObjectResult(errors);

                _logger.LogWarning(context.Exception.Message);
                _logger.LogError("stack trace" + "-" + context.Exception.StackTrace);
            }
            else if (context.Exception is TaskCanceledException){
                errors.Add("تسک ارسال شده کنسل شد");
                _logger.LogError(context.Exception.Message);
                _logger.LogError("stack trace" + "-" + context.Exception.StackTrace);

            }
            else
            {
                errors.Add("یک ایراد داخلی سرور رخ داده است");
                _logger.LogError(context.Exception.Message);
                _logger.LogError("stack trace" + "-" + context.Exception.StackTrace);

            }
          
           // _logger.LogError(context.Exception.InnerException.Message);
            context.Result = new BadRequestObjectResult(errors);
        }
    }
}
